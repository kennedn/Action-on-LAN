#!/usr/bin/python

import socket
import struct
from sys import argv
import subprocess as shell

# action to perform on valid WOL packet
action = "echo I'm a WOL packet!"
# Set this to a mac in format "00:11:22:33:44:55" if you wan't to override auto detection
mac_address = None
# port to look on for magic packets
port = 9

if len(argv) > 1:
    action = ' '.join(argv[1:])


# Try to derive mac address from default route, will work on linux.
if mac_address is None:
    try:
        p = shell.Popen(["ip", "route", "list", "0/0"], stdout=shell.PIPE)
        device = shell.check_output(["grep", "-v", "tun"], stdin=p.stdout).split()[4].decode()
        file = open("/sys/class/net/{}/address".format(device), "r")
        mac_address = file.read()
        file.close()
        print("Starting monitoring on {} with HWAddr {}".format(device, mac_address))
    except Exception:
        print("Couldn't detect mac address!")
        exit(1)

mac_address = mac_address.replace(':', '')

while True:
    # creating a rawSocket for communications
    # PF_SOCKET (packet interface), SOCK_RAW (Raw socket) - htons (protocol) 0x0842 = Wake On LAN protocol
    rawSocket = socket.socket(socket.PF_PACKET, socket.SOCK_RAW, socket.htons(0x0842))

    # read first packet in stream from recvfrom method, [0] to extract from tuple,
    # [14:] to ditch eth header, we already know we are a 0x0842 packet because of socket
    packet = rawSocket.recvfrom(2048)[0][14:]

    # Magic packet should always be 102 bytes long
    if len(packet) == 102:
        # Unpack packet, should only be our data now
        data = struct.unpack("!102s", packet)
        # Check the magic packet conforms to the expected format
        if data[0] == bytes.fromhex('ff' * 6 + mac_address * 16):
            shell.call(action.split())
